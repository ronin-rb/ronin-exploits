# frozen_string_literal: true
#
# ronin-exploits - A Ruby library for ronin-rb that provides exploitation and
# payload crafting functionality.
#
# Copyright (c) 2007-2024 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# ronin-exploits is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# ronin-exploits is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with ronin-exploits.  If not, see <https://www.gnu.org/licenses/>.
#

module Ronin
  module Exploits
    module Metadata
      #
      # Metadata mixin that allows an exploit to define a default filename.
      #
      module DefaultFilename
        #
        # Adds an {ClassMethods#default_filename default_filename} metadata
        # attribute to the exploit.
        #
        # @param [Class<Ronin::Exploits::Exploit>] exploit
        #   The exploit class that is including {Metadata::DefaultFilename}.
        #
        # @api private
        #
        def self.included(exploit)
          exploit.extend ClassMethods
        end

        #
        # Class-methods.
        #
        module ClassMethods
          #
          # Gets or sets the exploit's default filename.
          #
          # @param [Integer, nil] new_default_filename
          #   The optional new default filename to set.
          #
          # @return [Integer, nil]
          #   The exploit's default filename.
          #
          # @example
          #   default_filename 'exploit.docx'
          #
          # @api public
          #
          def default_filename(new_default_filename=nil)
            if new_default_filename
              @default_filename = new_default_filename
            else
              @default_filename ||= if superclass.kind_of?(ClassMethods)
                                      superclass.default_filename
                                    end
            end
          end
        end
      end
    end
  end
end
