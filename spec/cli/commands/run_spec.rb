require 'spec_helper'
require 'ronin/exploits/cli/commands/run'
require_relative 'man_page_example'

describe Ronin::Exploits::CLI::Commands::Run do
  include_examples "man_page"

  describe "#initialize" do
    it "must initialize #encoders_to_load to an empty Array" do
      expect(subject.encoders_to_load).to eq([])
    end

    it "must initialize #encoder_params to an empty Hash" do
      expect(subject.encoder_params).to eq({})
    end

    it "must initialize #payload_params to an empty Hash" do
      expect(subject.payload_params).to eq({})
    end

    it "must initialize #target_kwargs to an empty Hash" do
      expect(subject.target_kwargs).to eq({})
    end
  end

  describe "options_parser" do
    context "when parsing '--encoder-param encoder.name=value'" do
      let(:encoder)     { 'the_encoder' }
      let(:param_name)  { 'foo' }
      let(:param_value) { 'bar' }

      let(:argv) { ['--encoder-param', "#{encoder}.#{param_name}=#{param_value}"] }
      before { subject.option_parser.parse(argv) }

      it "must add the param name and value to the Hash for the encoder name within #encoder_params" do
        expect(subject.encoder_params).to eq(
          {
            encoder => {param_name.to_sym => param_value}
          }
        )
      end

      context "when parsing multiple '--encoder-param encoder.name=value' options" do
        let(:encoder)      { 'the_encoder' }
        let(:param_name1)  { 'foo'  }
        let(:param_value1) { 'bar'  }
        let(:param_name2)  { 'baz'  }
        let(:param_value2) { 'quix' }

        let(:argv) do
          [
            '--encoder-param', "#{encoder}.#{param_name1}=#{param_value1}",
            '--encoder-param', "#{encoder}.#{param_name2}=#{param_value2}"
          ]
        end
        before { subject.option_parser.parse(argv) }

        it "must merge the encoder_params together in the same Hash for the encoder name within #encoder_params" do
          expect(subject.encoder_params).to eq(
            {
              encoder => {
                param_name1.to_sym => param_value1,
                param_name2.to_sym => param_value2
              }
            }
          )
        end
      end
    end

    context "when parsing '--encoder-file FILE' options" do
      let(:encoder1) { 'path/to/encoder1' }
      let(:encoder2) { 'path/to/encoder2' }
      let(:argv) do
        [
          '--encoder-file', encoder1,
          '--encoder-file', encoder2
        ]
      end

      before { subject.option_parser.parse(argv) }

      it "must append the [:file, encoder_path] to #encoders_to_load" do
        expect(subject.encoders_to_load).to eq(
          [
            [:file, encoder1],
            [:file, encoder2]
          ]
        )
      end
    end

    context "when parsing '--encoder ENCODER' options" do
      let(:encoder1) { 'encoder1' }
      let(:encoder2) { 'encoder2' }
      let(:argv)     { ['--encoder', encoder1, '--encoder', encoder2] }

      before { subject.option_parser.parse(argv) }

      it "must append the [:name, encoder_name] to #encoders_to_load" do
        expect(subject.encoders_to_load).to eq(
          [
            [:name, encoder1],
            [:name, encoder2]
          ]
        )
      end
    end

    context "when parsing '--payload-param name=value'" do
      let(:param_name)  { 'foo' }
      let(:param_value) { 'bar' }

      let(:argv) { ['--payload-param', "#{param_name}=#{param_value}"] }
      before { subject.option_parser.parse(argv) }

      it "must add the param name and value to the #payload_params Hash" do
        expect(subject.payload_params).to eq(
          {
            param_name.to_sym => param_value
          }
        )
      end

      context "when parsing multiple '--payload-param name=value' options" do
        let(:param_name1)  { 'foo'  }
        let(:param_value1) { 'bar'  }
        let(:param_name2)  { 'baz'  }
        let(:param_value2) { 'quix' }

        let(:argv) do
          [
            '--payload-param', "#{param_name1}=#{param_value1}",
            '--payload-param', "#{param_name2}=#{param_value2}"
          ]
        end
        before { subject.option_parser.parse(argv) }

        it "must merge the payload params together in the same #payload_params Hash" do
          expect(subject.payload_params).to eq(
            {
              param_name1.to_sym => param_value1,
              param_name2.to_sym => param_value2
            }
          )
        end
      end
    end

    context "when parsing '--target-arch ARCH'" do
      let(:arch) { 'x86-64' }

      let(:argv) { ['--target-arch', arch] }
      before { subject.option_parser.parse(argv) }

      it "must set :arch in the #target_kwargs Hash to the architecture's Symbol" do
        expect(subject.target_kwargs[:arch]).to eq(:x86_64)
      end
    end

    context "when parsing '--target-os OS'" do
      let(:os) { 'windows' }

      let(:argv) { ['--target-os', os] }
      before { subject.option_parser.parse(argv) }

      it "must set :os in the #target_kwargs Hash to the OS's Symbol" do
        expect(subject.target_kwargs[:os]).to eq(os.to_sym)
      end
    end

    context "when parsing '--target-os-version VERSION'" do
      let(:os_version) { '11.0' }

      let(:argv) { ['--target-os-version', os_version] }
      before { subject.option_parser.parse(argv) }

      it "must set :os_version in the #target_kwargs Hash to the given OS version" do
        expect(subject.target_kwargs[:os_version]).to eq(os_version)
      end
    end

    context "when parsing '--target-software SOFTWARE'" do
      let(:software) { 'Google Chrome' }

      let(:argv) { ['--target-software', software] }
      before { subject.option_parser.parse(argv) }

      it "must set :software in the #target_kwargs Hash to the given software" do
        expect(subject.target_kwargs[:software]).to eq(software)
      end
    end

    context "when parsing '--target-software-version VERSION'" do
      let(:software_version) { '1.2.3' }

      let(:argv) { ['--target-software-version', software_version] }
      before { subject.option_parser.parse(argv) }

      it "must set :version in the #target_kwargs Hash to the given software version" do
        expect(subject.target_kwargs[:software_version]).to eq(software_version)
      end
    end
  end
end
