AllCops:
  NewCops: enable
  SuggestExtensions: false
  TargetRubyVersion: 3.1

inherit_gem:
  rubocop-ronin: rubocop.yml

#
# ronin-exploits specific exceptions
#

# Exploit#initialize exists for documentation purposes
Lint/UselessMethodDefinition:
  Exclude:
    - 'lib/ronin/exploits/exploit.rb'

# make an exception for the Vulnerable, NotVulnerable, and Unknown methods.
Naming/MethodName:
  AllowedPatterns:
    - Vulnerable
    - NotVulnerable
    - Unknown

# robucop mistakes :x86_64 for a "symbol number"
Naming/VariableNumber:
  AllowedIdentifiers:
    - x86_64

# we actually want to use OpenStruct for Ronin::Exploits::Target
Style/OpenStructUse:
  Exclude:
    - 'lib/ronin/exploits/target.rb'
    - 'spec/target_spec.rb'

# aligning rows of columns vertically actually helps with readability
Layout/SpaceInsideArrayPercentLiteral:
  Exclude:
    - 'spec/loot/file_spec.rb'

# aligning rows of columns vertically actually helps with readability
Layout/SpaceInsidePercentLiteralDelimiters:
  Exclude:
    - 'spec/loot/file_spec.rb'

# I cannot think of good format string annotation names for the format-string
Style/FormatStringToken:
  Exclude:
    - 'lib/ronin/exploits/mixins/format_string.rb'

# `bp:` and `ip:` are OK keyword argument names
Naming/MethodParameterName:
  Exclude:
    - 'lib/ronin/exploits/mixins/stack_overflow.rb'

# `if !value.nil? ... else ...` and `if !value.empty?` ... else ...` are
# acceptable. Otherwise prefer `unless ... else ...`.
Style/NegatedIfElseCondition:
  Exclude:
    - 'lib/ronin/exploits/sqli.rb'
    - 'lib/ronin/exploits/mixins/html.rb'

# we need to define a #=== operator for matching payload class(es)
Style/CaseEquality:
  Exclude:
    - 'lib/ronin/exploits/mixins/has_payload.rb'
    - 'spec/mixins/has_payload_spec.rb'
